import path from "node:path";
import "dotenv/config";
import { build, dirname } from "@enschedule/dashboard";
import type { Worker } from "@enschedule/worker";
import type { AppLoadContext } from "@remix-run/node";
import {
  createReadableStreamFromReadable,
  createRequestHandler as createRemixRequestHandler,
  writeReadableStreamToWritable,
} from "@remix-run/node";
import compression from "compression";
import express, { static as expressStatic } from "express";
import morgan from "morgan";
import { z } from "zod";

/**
 * A function that returns the value to use as `context` in route `loader` and
 * `action` functions.
 *
 * You can think of this as an escape hatch that allows you to pass
 * environment/platform-specific values through to your loader/action, such as
 * values that are generated by Express middleware like `req.session`.
 */
type GetLoadContextFunction = (
  req: express.Request,
  res: express.Response
) => Promise<AppLoadContext> | AppLoadContext;

type RequestHandler = (
  req: express.Request,
  res: express.Response,
  next: express.NextFunction
) => Promise<void>;

/**
 * Returns a request handler for Express that serves the response using Remix.
 */
function createRequestHandler({
  getLoadContext,
  mode = process.env.NODE_ENV,
}: {
  getLoadContext?: GetLoadContextFunction;
  mode?: string;
}): RequestHandler {
  const handleRequest = createRemixRequestHandler(build, mode);

  return async (
    req: express.Request,
    res: express.Response,
    next: express.NextFunction
  ) => {
    try {
      const request = createRemixRequest(req, res);
      const loadContext = await getLoadContext?.(req, res);

      const response = await handleRequest(request, loadContext);

      await sendRemixResponse(res, response);
    } catch (error: unknown) {
      // Express doesn't support async functions, so we have to pass along the
      // error manually using next().
      next(error);
    }
  };
}

function createRemixHeaders(
  requestHeaders: express.Request["headers"]
): Headers {
  const headers = new Headers();

  for (const [key, values] of Object.entries(requestHeaders)) {
    if (values) {
      if (Array.isArray(values)) {
        for (const value of values) {
          headers.append(key, value);
        }
      } else {
        headers.set(key, values);
      }
    }
  }

  return headers;
}

function createRemixRequest(
  req: express.Request,
  res: express.Response
): Request {
  // req.hostname doesn't include port information so grab that from
  // `X-Forwarded-Host` or `Host`
  const [, hostnamePort] = req.get("X-Forwarded-Host")?.split(":") ?? [];
  const [, hostPort] = req.get("host")?.split(":") ?? [];
  const port = hostnamePort || hostPort;
  // Use req.hostname here as it respects the "trust proxy" setting
  const resolvedHost = `${req.hostname}${port ? `:${port}` : ""}`;
  console.log("req.url", req.url);
  const url = new URL(`${req.protocol}://${resolvedHost}${req.url}`);

  // Abort action/loaders once we can no longer write a response
  const controller = new AbortController();
  res.on("close", () => controller.abort());

  const init: RequestInit = {
    method: req.method,
    headers: createRemixHeaders(req.headers),
    signal: controller.signal,
  };

  if (req.method !== "GET" && req.method !== "HEAD") {
    init.body = createReadableStreamFromReadable(req);
    (init as { duplex: "half" }).duplex = "half";
  }

  return new Request(url.href, init);
}

async function sendRemixResponse(
  res: express.Response,
  nodeResponse: Response
): Promise<void> {
  res.statusMessage = nodeResponse.statusText;
  res.status(nodeResponse.status);

  for (const [key, value] of nodeResponse.headers.entries()) {
    res.append(key, value);
  }

  if (nodeResponse.headers.get("Content-Type")?.match(/text\/event-stream/i)) {
    res.flushHeaders();
  }

  if (nodeResponse.body) {
    await writeReadableStreamToWritable(nodeResponse.body, res);
  } else {
    res.end();
  }
}

const app = express();

app.disable("x-powered-by");
app.use(compression());

console.log(
  "@build.assetsBuildDirectory",
  dirname,
  build.publicPath,
  build.assetsBuildDirectory,
  build.mode
);

app.use(
  build.publicPath,
  expressStatic(path.join(dirname, build.assetsBuildDirectory), {
    immutable: true,
    maxAge: "1y",
  })
);

app.use(expressStatic(path.join(dirname, "public"), { maxAge: "1h" }));
app.use(morgan("tiny"));

const serverExports = build.entry.module as unknown as {
  scheduler: Worker;
};

const scheduler = serverExports.scheduler;

const { listen } = scheduler.serve({ port: 3001 }, app);
const handler = createRequestHandler({
  // return anything you want here to be available as `context` in your
  // loaders and actions. This is where you can bridge the gap between Remix
  // and your server
  getLoadContext(_req, _res) {
    return {};
  },
  mode: build.mode,
});

// needs to handle all verbs (GET, POST, etc.)
app.all("*", (req, res, next) => {
  handler(req, res, next)
    .then(() => {
      // handled
    })
    .catch(next);
});

listen();

scheduler.registerJob({
  id: "send-http-request",
  title: "Send HTTP request",
  dataSchema: z.object({
    url: z.string(),
  }),
  job: (data) => {
    console.log("pretending to fetch", data.url);
  },
  description: "Provide HTTP parameters as data to send a request",
  example: {
    url: "http://localhost:3000",
  },
});

// app.listen(3001, () => {
//   console.log("Listening on port http://localhost:3001");
// });
