name: alpha

on:
  push:
    branches:
      - "main"

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: "add moreutils"
        run: |
          sudo apt-get install moreutils
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: ss
        run: ss -l -p -n
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - uses: pnpm/action-setup@v2.0.1
        with:
          version: 8.7.0
      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install
      - name: Lint
        run: pnpm lint
      - name: Typecheck
        run: pnpm typecheck
      - name: Start postgres and enstore for testing
        run: docker compose up -d
      - name: Wait for postgres to be up
        run: until docker compose exec postgres pg_isready ; do sleep 5 ; done
      - name: Run unit tests
        run: pnpm run --filter=@enschedule/types --filter=@enschedule/cli test
      - name: Run unit tests for postgres
        run: TEST_DIALECT=pg pnpm run --filter=@enschedule/pg-driver
      - name: Run unit tests for sqlite
        run: TEST_DIALECT=sqlite pnpm run --filter=@enschedule/pg-driver
      - name: Install Playwright Browsers
        run: npx playwright install chromium --with-deps
      - name: modify package jsons main fields
        run: ./release-package.sh
      - name: Build all packages
        run: NODE_ENV=production pnpm run build
      - name: corepack enable
        run: corepack enable
      - name: All playwright tests
        run: pnpm run playwright test
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 1
      - name: Build images
        run: infrastructure/build-images.sh alpha

      - name: Test docker images, run images
        run: |
          docker network create enschedule_docker_test

          docker container run -itd --rm \
            --name simple-http-server \
            --network enschedule_docker_test \
            -p 3000:3000 node:alpine \
            /bin/sh -c "echo \"const http = require('http'); const server = http.createServer((req, res) => { res.writeHead(200, {'Content-Type': 'application/json'}); res.end(JSON.stringify({ message: 'Hello World' })); }); server.listen(3000, () => console.log('Server running on port 3000'));\" > server.js && node server.js"

          docker container run -itd --rm \
            --name enschedule-dashboard \
            --network enschedule_docker_test \
            -e SQLITE=":memory:" \
            -e ENSCHEDULE_FUNCTIONS="@enschedule-fns/fetch @enschedule-fns/log" \
            -e ENSCHEDULE_MIGRATE=true \
            -e ENSCHEDULE_ACCESS_TOKEN_SECRET=secret_key \
            -e ENSCHEDULE_REFRESH_TOKEN_SECRET=secret_key \
            -e ENSCHEDULE_COOKIE_SESSION_SECRET=s3cr3t \
            -e ADMIN_ACCOUNT=adm1n:s3cr3t \
            -e NAFS_URI=file:///var/logs/enschedule \
            -p 3333:3000 \
            ghcr.io/ricsam/enschedule-dashboard:alpha

      - name: Wait for service to be up
        run: |
          until [ "$(curl -s http://localhost:3333/healthz | jq -r '.message')" == "Endpoint is healthy" ]; do echo "Waiting for the dashboard endpoint to become healthy..."; sleep 1; done
          until [ "$(curl -s http://localhost:3000 | jq -r '.message')" == "Hello World" ]; do echo "Waiting for the test endpoint to become healthy..."; sleep 1; done

      - name: Test docker images, playwright
        run: docker container logs -f enschedule-dashboard & TEST_HELM=true DASHBOARD_URL=http://localhost:3333 pnpm run playwright test

      - name: Test docker images, stop container
        run: |
          docker container stop enschedule-dashboard
          docker container stop simple-http-server
          docker network remove enschedule_docker_test

      - name: start minikube
        uses: medyagh/setup-minikube@master
      - name: Load images into minikube
        run: |
          minikube image load --overwrite=true 'ghcr.io/ricsam/enschedule-worker:alpha'
          minikube image load --overwrite=true 'ghcr.io/ricsam/enschedule-dashboard:alpha'
      - name: Get helm
        uses: WyriHaximus/github-action-helm3@v3
      - name: Lint chart
        run: helm lint infrastructure/charts/enschedule
      - name: Install chart
        run: |
          helm upgrade --install enschedule infrastructure/charts/enschedule \
            --set worker.image.pullPolicy=Never \
            --set dashboard.image.pullPolicy=Never \
            --set worker.image.tag=alpha \
            --set dashboard.image.tag=alpha \
            --set dashboard.service.type=NodePort \
            --set dashboard.service.port=3000 \
            --set worker.service.type=NodePort \
            --set worker.service.port=3000 \
            --set config.ADMIN_ACCOUNT=adm1n:s3cr3t
      - name: Test service URLs
        run: |
          minikube service list
          kubectl get pods
          kubectl wait --for=condition=available --timeout=20m deployment/dashboard
          kubectl wait --for=condition=available --timeout=20m deployment/database
          kubectl wait --for=condition=available --timeout=20m deployment/worker
          kubectl get pods
          minikube service dashboard-service --url

      - name: Playwright on helm
        run: TEST_HELM=true DASHBOARD_URL=$(minikube service dashboard-service --url) pnpm run playwright test

      - name: Install CLI
        run: cd packages/cli && npm link

      - name: Test CLI - reset
        run: ENSCHEDULE_API_KEY="Api-Key secret_key" ENSCHEDULE_API_ENDPOINT=$(minikube service worker-service --url) ENSCHEDULE_API_VERSION="1" enschedule reset --force

      - name: Test CLI - get schedules, after a reset there should only be zero schedules (plus line for header)
        run: |
          [ $(ENSCHEDULE_API_KEY="secret_key" ENSCHEDULE_API_ENDPOINT=$(minikube service worker-service --url) ENSCHEDULE_API_VERSION="1" enschedule get schedules | wc -l) -eq 1 ]

      - name: Test CLI - apply
        run: |
          export ENSCHEDULE_API_KEY="Api-Key secret_key"
          export ENSCHEDULE_API_ENDPOINT=$(minikube service worker-service --url)
          export ENSCHEDULE_API_VERSION="1"
          STDOUT=$(enschedule apply -f packages/cli/__fixtures__/cron.yml)
          echo $STDOUT
          [ $(echo $STDOUT | grep created | wc -l) -eq 3 ]
          STDOUT=$(enschedule apply -f packages/cli/__fixtures__/cron.yml)
          echo $STDOUT
          [ $(echo $STDOUT | grep unchanged | wc -l) -eq 3 ]

      - name: Test CLI - get schedules, after applying a yaml file there should be 3 schedules (plus line for header)
        run: |
          [ $(ENSCHEDULE_API_KEY="secret_key" ENSCHEDULE_API_ENDPOINT=$(minikube service worker-service --url) ENSCHEDULE_API_VERSION="1" enschedule get schedules | wc -l) -eq 4 ]

      - name: Test CLI - create schedule
        run: |

          export ENSCHEDULE_API_KEY="secret_key"
          export ENSCHEDULE_API_ENDPOINT=$(minikube service worker-service --url)
          export ENSCHEDULE_API_VERSION="1"

          DATE_ONE=$(date -d "+7 days" --iso-8601=seconds)
          DATE_TWO=$(date -d "+14 days" --iso-8601=seconds)

          # Mac
          # DATE_ONE=$(date -v+7d -u +"%Y-%m-%dT%H:%M:%S%z")
          # DATE_TWO=$(date -v+14d -u +"%Y-%m-%dT%H:%M:%S%z")


          enschedule create schedule --update \
            --name "created-with-cli" \
            --run-at "$DATE_ONE" \
            --function-id log-job \
            --function-version 1 \
            --data '{ "message": "something to log" }' \
            --title "Schedule created from cli"
          
          CUR_DATE=$(enschedule get schedules -o json | jq -r '.[] | select(.eventId == "created-with-cli") | .runAt')

          DATE_ONE=${DATE_ONE:0:19}
          CUR_DATE=${CUR_DATE:0:19}
          [[ "$CUR_DATE" == "$DATE_ONE" ]]

          enschedule create schedule --update \
            --name "created-with-cli" \
            --run-at "$DATE_TWO" \
            --function-id log-job \
            --function-version 1 \
            --data '{ "message": "something to log" }' \
            --title "Schedule created from cli"
          
          CUR_DATE=$(enschedule get schedules -o json | jq -r '.[] | select(.eventId == "created-with-cli") | .runAt')

          DATE_TWO=${DATE_TWO:0:19}
          CUR_DATE=${CUR_DATE:0:19}
          [[ "$CUR_DATE" == "$DATE_TWO" ]]

      - name: Test CLI - reset
        run: ENSCHEDULE_API_KEY="Api-Key secret_key" ENSCHEDULE_API_ENDPOINT=$(minikube service worker-service --url) ENSCHEDULE_API_VERSION="1" enschedule reset --force

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: helm-playwright-report
          path: helm-playwright-report/
          retention-days: 1

  docker_images:
    # depending on default permission settings for your org (contents being read-only or read-write for workloads), you will have to add permissions
    # see: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#modifying-the-permissions-for-the-github_token
    permissions:
      contents: write
      packages: write
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker Worker meta
        id: workerMeta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/ricsam/enschedule-worker
          tags: |
            type=sha
            type=raw,alpha
      - name: Build and push worker
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.workerMeta.outputs.tags }}
          labels: ${{ steps.workerMeta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          target: worker
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Docker Dashboard meta
        id: dashboardMeta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/ricsam/enschedule-dashboard
          tags: |
            type=sha
            type=raw,alpha
      - name: Build and push dashboard
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.dashboardMeta.outputs.tags }}
          labels: ${{ steps.dashboardMeta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          target: dashboard
          cache-from: type=gha
          cache-to: type=gha,mode=max

  helm_chart:
    # depending on default permission settings for your org (contents being read-only or read-write for workloads), you will have to add permissions
    # see: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#modifying-the-permissions-for-the-github_token
    permissions:
      contents: write
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.6.0
        with:
          charts_dir: infrastructure/charts
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          CR_RELEASE_NAME_TEMPLATE: "helm-v{{ .Version }}-app-v{{ .AppVersion }}"
          # CR_RELEASE_NOTES_FILE: # TODO generate this file based on the diff in the CHANGELOG.md files

  npm_publish:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: "add moreutils"
        run: |
          sudo apt-get install moreutils
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: pnpm/action-setup@v2.0.1
        with:
          version: 8.7.0
      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install
      - name: Build all packages
        run: NODE_ENV=production pnpm run build
      - name: corepack enable
        run: corepack enable
      - name: prepare packages for npm publish
        run: node release-package.js
      - name: changeset publish
        run: npx changeset publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
